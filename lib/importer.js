'use strict';

// Generated by CoffeeScript 1.7.1
(function() {
  var Markdown, Page, Section, Treatise, async, buildPages, exports, fs, keystone, path, yaml;

  keystone = require('keystone');

  fs = require('fs');

  path = require('path');

  async = require('async');

  yaml = require('js-yaml');

  Treatise = keystone.list('Treatise');

  Page = keystone.list('Page');

  Section = keystone.list('Section');

  Markdown = keystone.Field.Types.Markdown;

  buildPages = function(user, treatise, treatiseData, callback) {
    var buildPage;
    buildPage = (function(_this) {
      return function(pageData, callback) {
        var model;
        model = new Page.model({
          title: pageData.title,
          author: user,
          treatise: treatise,
          sortOrder: pageData.sortOrder
        });
        return model.save(function(e, pageModel) {
          var buildSection;
          if (e) {
            console.log("Error building page", page.sortOrder, ":", pageData.title);
            callback(e);
            return;
          }
          if (!pageData.sections) {
            callback(e, pageModel);
            return;
          }
          buildSection = function(section, callback) {
            model = new Section.model({
              author: user,
              page: pageModel,
              sortOrder: section.sortOrder,
              bounds: {
                x: section.sortOrder % 2 === 1 ? .2 : .6,
                y: section.sortOrder < 3 ? .2 : .6,
                width: 0.3,
                height: 0.3
              }
            });
            model.translation.md = section.translation;
            return model.save(function() {
              if (e) {
                console.log("Error building section", section.sortOrder, "in", pageData.title);
              }
              return callback(e, section);
            });
          };
          return async.eachSeries(pageData.sections, buildSection, function(e) {
            return callback(e, pageModel);
          });
        });
      };
    })(this);
    treatiseData.pages.forEach(function(page, index) {
      page.sortOrder = index + 1;
      if (!page.sections) {
        return;
      }
      return page.sections.forEach(function(section, index) {
        return section.sortOrder = index + 1;
      });
    });
    return async.eachSeries(treatiseData.pages, buildPage, function(e) {
      return callback(e, treatise);
    });
  };

  exports = module.exports = function(user, path, callback) {
    var contents, data, treatiseData;
    contents = fs.readFileSync(path, 'utf8');
    data = yaml.load(contents);
    treatiseData = data.treatise;
    return async.waterfall([
      function(callback) {
        return Treatise.model({
          title: treatiseData.title,
          key: treatiseData.key,
          author: treatiseData.author
        }).save(function(e, treatise) {
          return callback(e, treatise);
        });
      }, (function(_this) {
        return function(treatise, callback) {
          _this.treatise = treatise;
          return buildPages(user, treatise, treatiseData, callback);
        };
      })(this)
    ], function(e) {
      return callback(e, this.treatise);
    });
  };

}).call(this);
